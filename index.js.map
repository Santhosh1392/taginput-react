{"version":3,"file":"index.js","sources":["src/index.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useReducer, useState } from 'react'\nimport './styles.scss'\n\nconst getId = () => `_${Math.random().toString(36).substr(2, 9)}`;\n\nconst TagItem = ({\n  tag, isLastIndex, backspacePressedCount, handleOnRemoveTag\n}) => {\n  return (\n    <div\n      className={\n        `tag__box ${backspacePressedCount === 1 && isLastIndex && 'warning__box'}`\n      }\n      key={`${getId()}`}\n    >\n      <span>{tag}</span>\n      <span\n        className=\"close__mark\"\n        onClick={() => handleOnRemoveTag(tag)}>\n        Ã—\n      </span>\n    </div>\n  )\n}\n\nconst tagsListReducer = (state, action) => {\n  const { type, value } = action\n  const newState = [...state]\n  if (type ===  'ADD_TAG' && value) {\n    newState.push(value)\n  } else if (type === 'REMOVE_TAG') {\n    newState.splice(value, 1)\n  }\n  return newState\n}\n\nconst TagsInput = ({\n  tags, placeholder, onChange\n}) => {\n  const [tagsList, setTagsList] = useReducer(tagsListReducer, tags)\n  const [tagInputValue, setTagInputValue] = useState('')\n  const [backspacePressedCount, setBackspacePressedCount] = useState(0)\n\n  const focusInputElement = () => {\n    const element = document.querySelector('#tagsMainInputBox')\n    if (element) {\n      element.focus()\n    }\n  }\n\n  useEffect(() => {\n    if (onChange instanceof Function) {\n      onChange(tagsList)\n    }\n  }, [tagsList])\n\n  const handleOnKeyDown = (event) => {\n    const { key } = event\n    if (key === 'Enter' && tagsList.indexOf(tagInputValue) === -1) {\n      setTagsList({ type: 'ADD_TAG', value: tagInputValue})\n      setTagInputValue('')\n      setBackspacePressedCount(0)\n    } else if (key === 'Backspace') {\n      if (backspacePressedCount === 1 && !tagInputValue) {\n        setTagsList({ type: 'REMOVE_TAG', value: tagsList.length - 1})\n        setTagInputValue('')\n        setBackspacePressedCount(0)\n      } else if (!tagInputValue && backspacePressedCount !== 1){\n        setBackspacePressedCount(backspacePressedCount + 1)\n      }\n    }\n  }\n\n  const handleOnRemoveTag = (tag) => {\n    const tagIndex = tagsList.findIndex(data => data === tag)\n    setTagsList({ type: 'REMOVE_TAG', value: tagIndex })\n  }\n\n  return (\n    <div className=\"tags-input__contianer\" onClick={focusInputElement}>\n      <div className=\"tags__section\">\n        {tagsList.map((tag, index) => {\n          const isLastIndex = (index === (tagsList.length - 1))\n          return (\n            <TagItem\n              tag={tag}\n              isLastIndex={isLastIndex}\n              backspacePressedCount={backspacePressedCount}\n              handleOnRemoveTag={handleOnRemoveTag}\n            />\n          )}\n        )}\n        <input\n          type=\"text\"\n          className=\"tags__input__box\"\n          onKeyDown={handleOnKeyDown}\n          onChange={(e) => setTagInputValue(e.target.value)}\n          name=\"tagInput\"\n          value={tagInputValue}\n          placeholder={placeholder}\n          id=\"tagsMainInputBox\"\n        />\n      </div>\n    </div>\n  )\n}\n\nTagsInput.defaultProps = {\n  placeholder: 'Enter to add',\n  tags: []\n}\n\nexport default TagsInput"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}